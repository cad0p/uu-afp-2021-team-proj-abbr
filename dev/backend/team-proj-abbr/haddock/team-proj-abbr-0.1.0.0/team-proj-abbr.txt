-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ShortHndr
--   
--   Please see the README on GitHub at
--   <a>https://github.com/cad0p/uu-afp-2021-team-proj-abbr#readme</a>
@package team-proj-abbr
@version 0.1.0.0


module LibCli.Handlers


module LibCli.OutputInterface
returnOutput :: Maybe FilePath -> String -> IO ()


module LibCli.Spec
cliModes :: [ShortHndr]

-- | ShortHndr CLI interface specification.
data ShortHndr

-- | Defines the arguments for the replace command
Replace :: Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> ShortHndr
[input] :: ShortHndr -> Maybe FilePath
[out] :: ShortHndr -> Maybe FilePath

-- | this argument replaces input and output with what is provided here,
--   and has precedence over the others
[inplace] :: ShortHndr -> Maybe FilePath
[kb] :: ShortHndr -> Maybe FilePath

-- | Defines the arguments for the expand command
Expand :: String -> Maybe FilePath -> ShortHndr
[abbreviation] :: ShortHndr -> String
[kb] :: ShortHndr -> Maybe FilePath

-- | Defines the arguments for the list command
List :: Maybe FilePath -> ShortHndr
[kb] :: ShortHndr -> Maybe FilePath

-- | Defines the arguments for the add command
Add :: String -> String -> Maybe FilePath -> ShortHndr
[abbreviation] :: ShortHndr -> String
[expansion] :: ShortHndr -> String
[kb] :: ShortHndr -> Maybe FilePath

-- | Defines the arguments for the update command
Update :: String -> String -> Maybe FilePath -> ShortHndr
[abbreviation] :: ShortHndr -> String
[expansion] :: ShortHndr -> String
[kb] :: ShortHndr -> Maybe FilePath

-- | Defines the arguments for the delete command
Delete :: String -> Maybe FilePath -> ShortHndr
[abbreviation] :: ShortHndr -> String
[kb] :: ShortHndr -> Maybe FilePath
instance GHC.Show.Show LibCli.Spec.ShortHndr
instance Data.Data.Data LibCli.Spec.ShortHndr


module LibCore.InputInterface
getInput :: String


module LibCore.Models

-- | We parse a string into a NoToken if it does not match the syntax for |
--   parsing. The DoMap is a string that has to be mapped. In our
--   proposals, | the DoMap strings start with @@
data Token
NoToken :: String -> Token
DoMap :: Keyword -> Token
data Keyword
Keyword :: String -> Bool -> Keyword
[keyword] :: Keyword -> String
[plural] :: Keyword -> Bool

-- | Reserved domain-level error indications.
newtype Error
StandardError :: String -> Error
instance GHC.Show.Show LibCore.Models.Keyword
instance GHC.Classes.Ord LibCore.Models.Keyword
instance GHC.Classes.Eq LibCore.Models.Keyword
instance GHC.Show.Show LibCore.Models.Token
instance GHC.Classes.Ord LibCore.Models.Token
instance GHC.Classes.Eq LibCore.Models.Token
instance GHC.Show.Show LibCore.Models.Error


module LibCore.KnowledgeBase
type KnowledgeBaseStructure = Map Keyword Keyword

-- | Build a new Knowledge Base from the supplied keyword pair list.
build :: [(Keyword, Keyword)] -> KnowledgeBaseStructure

-- | Get the list of all the stored records in the Knowledge Base.
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; testKB = build [(Keyword {keyword = "brb", plural = False}, Keyword {keyword = "be right back", plural = False})]
--   
--   &gt;&gt;&gt; listAll testKB
--   [(Keyword {keyword = "brb", plural = False},Keyword {keyword = "be right back", plural = False})]
--   </pre>
listAll :: KnowledgeBaseStructure -> [(Keyword, Keyword)]

-- | Retrieve a single element by its keyword.
--   
--   Examples
--   
--   <pre>
--   &gt;&gt;&gt; testKB = build [(Keyword {keyword = "brb", plural = False}, Keyword {keyword = "be right back", plural = False})]
--   
--   &gt;&gt;&gt; get testKB (Keyword {keyword = "brb", plural = False})
--   Right (Keyword {keyword = "be right back", plural = False})
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; get testKB (Keyword {keyword = "beb", plural = False})
--   Left (StandardError "no record found for this keyword : Keyword {keyword = \"beb\", plural = False}")
--   </pre>
get :: KnowledgeBaseStructure -> Keyword -> Either Error Keyword

-- | Add new item to the Knowledge Base. Adds the item to the KB as a new
--   record if the key was notseen before, and replaces the existing record
--   otherwise.
--   
--   Examples
--   
--   <pre>
--   &gt;&gt;&gt; testKB = build [(Keyword {keyword = "brb", plural = False}, Keyword {keyword = "be right back", plural = False})]
--   
--   &gt;&gt;&gt; add testKB (Keyword {keyword = "btw", plural = False}) (Keyword {keyword = "by the way", plural = False})
--   (Keyword {keyword = "by the way", plural = False},fromList [(Keyword {keyword = "brb", plural = False},Keyword {keyword = "be right back", plural = False}),(Keyword {keyword = "btw", plural = False},Keyword {keyword = "by the way", plural = False})])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; add testKB (Keyword {keyword = "btw", plural = False}) (Keyword {keyword = "by the way!", plural = False})
--   (Keyword {keyword = "by the way!", plural = False},fromList [(Keyword {keyword = "brb", plural = False},Keyword {keyword = "be right back", plural = False}),(Keyword {keyword = "btw", plural = False},Keyword {keyword = "by the way!", plural = False})])
--   </pre>
add :: KnowledgeBaseStructure -> Keyword -> Keyword -> (Keyword, KnowledgeBaseStructure)

-- | Updates the record at given key with the new value. Only full updates
--   are supported. If the key is not in the KB, returns an error.
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; testKB = build [(Keyword {keyword = "brb", plural = False}, Keyword {keyword = "be right back", plural = False})]
--   
--   &gt;&gt;&gt; put testKB (Keyword {keyword = "brb", plural = False}) (Keyword {keyword = "BE RIGHT BACK", plural = False})
--   Right (Keyword {keyword = "BE RIGHT BACK", plural = False},fromList [(Keyword {keyword = "brb", plural = False},Keyword {keyword = "BE RIGHT BACK", plural = False})])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; put testKB (Keyword {keyword = "btw", plural = False}) (Keyword {keyword = "by the way!", plural = False})
--   Left (StandardError "no record found for this keyword : Keyword {keyword = \"btw\", plural = False}")
--   </pre>
put :: KnowledgeBaseStructure -> Keyword -> Keyword -> Either Error (Keyword, KnowledgeBaseStructure)

-- | Removes an existing item at the given key form the Knowledge Base. If
--   the key is not present, return as error.
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; testKB = build [(Keyword {keyword = "brb", plural = False}, Keyword {keyword = "be right back", plural = False})]
--   
--   &gt;&gt;&gt; remove testKB (Keyword {keyword = "brb", plural = False})
--   Right (fromList [])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; remove testKB (Keyword {keyword = "btw", plural = False})
--   Left (StandardError "no record found for this keyword : Keyword {keyword = \"btw\", plural = False}")
--   </pre>
remove :: KnowledgeBaseStructure -> Keyword -> Either Error KnowledgeBaseStructure


module LibCli.Adapters

-- | <a>KbEntry</a> is an entry on the file containing the Knowledge Base.
data KbEntry
KbEntry :: String -> String -> KbEntry
[abbreviation] :: KbEntry -> String
[expansion] :: KbEntry -> String

-- | <a>mapEntries</a> maps entries to a pair of (<a>abbreviation</a>,
--   <a>expansion</a>)
mapEntries :: KbEntry -> (Keyword, Keyword)

-- | <a>getKnowledgeBase</a> parses from a CSV file to a
--   <tt>KnowledgeBaseStructure</tt>.
getKnowledgeBase :: Vector KbEntry -> KnowledgeBaseStructure
instance Data.Csv.Conversion.FromNamedRecord LibCli.Adapters.KbEntry


module LibCore.Parser
type ParseStructure = [Token]

-- | The abbreviation symbol. Can later be made configurable
abbSymbol :: String

-- | The plural symbol. String between the abbSymbol and the pluralSymbol
--   are interpreted as plurals
pluralSymbol :: String

-- | Consume whitespace characters
whitespace :: Parser ()

-- | Lexeme parsers consume the whitespace after them
lexeme :: Parser a -> Parser a

-- | Given a string, parse it. This function can throw an error if parsing
--   fails
doParse :: String -> ParseStructure

-- | Map a string to a list of Tokens. For example: &gt;&gt;&gt; parseInput
--   "@<tt>bob" Right [DoMap (Keyword {keyword = "bob", plural = False})]
--   &gt;&gt;&gt; parseInput "</tt>@fw's" Right [DoMap (Keyword {keyword =
--   "fw", plural = True})] &gt;&gt;&gt; parseInput "hello!" Right [NoToken
--   "hello!"]
parseInput :: String -> Either ParseError ParseStructure

-- | The main parser tries to consume all input into a ParseStructure,
--   given an | abbreviation symbol and a plural symbol
mainParser :: String -> String -> Parser ParseStructure

-- | Inverse of the <a>isSpace</a> function from Data.Char
notSpace :: Char -> Bool

-- | Given an abbreviation string s and a plural end string p, parse the
--   string between it
pluralAbbrParser :: String -> String -> Parser Token

-- | Given an abbreviation string s, parse the string after it
abbrParser :: String -> Parser Token

-- | Parse any string into a token
noAbbrParser :: Parser Token


module LibCore.Mapper

-- | Map a ParseStructure using a KnowledgeBaseStructure to another
--   ParseStructure. The structure of this function makes it possible to
--   apply multiple KnowledgeBases to one ParseStructure
mapParseStructure :: KnowledgeBaseStructure -> ParseStructure -> ParseStructure

-- | Lookup a token in the KnowledgeBaseStructure. If it is not found,
--   return the lookup token. Otherwise, it returns the result of the
--   lookup, which is also a token
doLookup :: KnowledgeBaseStructure -> Token -> Token


module LibCore.Decoder
decode :: ParseStructure -> String
tokenToString :: Token -> String


module LibCli.Main
cliController :: ShortHndr -> IO ()

-- | <a>replaceMode</a> does the replacind heavy lifting
--   
--   Under the hood it checks for errors in the input file (TODO input
--   file) and the KB
replaceMode :: ShortHndr -> IO ()

-- | Main entrypoint of the CLI application.
--   
--   <i>CLI endpoints:</i>
--   
--   <ul>
--   <li>replace - expand all the abbreviation in the full text file</li>
--   <li>expand - find an expansion for a single abbreviation input</li>
--   <li>list - list all the known expansion records</li>
--   <li>add - add a new record to the knowledge base</li>
--   <li>update - modify an existing record in the knowledge base</li>
--   <li>delete - delete an existing record from the knowledge base</li>
--   </ul>
--   
--   <i>Usage:</i>
--   
--   <ul>
--   <li>--help - prints the full CLI tool support</li>
--   <li>&lt;command&gt; [args*] [options*] - invokes the command</li>
--   </ul>
--   
--   <i>See more:</i>
--   
--   <ul>
--   <li>See <a>Spec</a> for more information about the CLI endpoints.</li>
--   </ul>
cliMain :: IO ()
