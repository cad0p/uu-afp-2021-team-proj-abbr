-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ShortHndr
--   
--   Please see the README on GitHub at
--   <a>https://github.com/cad0p/uu-afp-2021-team-proj-abbr#readme</a>
@package team-proj-abbr
@version 0.1.0.0


module LibCli.Spec
data Expansion
[Re] :: Replace -> Expansion
[Ex] :: Expand -> Expansion
data KnowledgeBaseTypes
[Lst] :: List -> KnowledgeBaseTypes
[Ad] :: Add -> KnowledgeBaseTypes
[Up] :: Update -> KnowledgeBaseTypes
[Del] :: Delete -> KnowledgeBaseTypes
data ShortHndrModes
[Exp] :: Expansion -> ShortHndrModes
[Kbt] :: KnowledgeBaseTypes -> ShortHndrModes
[Hlp] :: ShortHndrModes

-- | ShortHndr CLI interface specification. |Defines the arguments for the
--   replace command
data Replace
Replace :: Maybe FilePath -> Maybe FilePath -> Maybe Bool -> Maybe FilePath -> Replace
[input] :: Replace -> Maybe FilePath
[out] :: Replace -> Maybe FilePath
[inplace] :: Replace -> Maybe Bool
[replace_kb] :: Replace -> Maybe FilePath

-- | Defines the arguments for the expand command
data Expand
Expand :: String -> Maybe FilePath -> Expand
[expand_abbr] :: Expand -> String
[expand_kb] :: Expand -> Maybe FilePath

-- | Defines the arguments for the list command
newtype List
List :: Maybe FilePath -> List
[list_kb] :: List -> Maybe FilePath

-- | Defines the arguments for the add command
data Add
Add :: String -> String -> Maybe FilePath -> Add
[add_abbr] :: Add -> String
[add_expansion] :: Add -> String
[add_kb] :: Add -> Maybe FilePath

-- | Defines the arguments for the update command
data Update
Update :: String -> String -> Maybe FilePath -> Update
[update_abbr] :: Update -> String
[update_expansion] :: Update -> String
[update_kb] :: Update -> Maybe FilePath

-- | Defines the arguments for the delete command
data Delete
Delete :: String -> Maybe FilePath -> Delete
[delete_abbr] :: Delete -> String
[delete_kb] :: Delete -> Maybe FilePath

-- | Utility function to provide help for the file type arguments.
fileFlags :: String -> Maybe FilePath -> Maybe FilePath
replace :: ShortHndrModes
expand :: ShortHndrModes
list :: ShortHndrModes
add :: ShortHndrModes
update :: ShortHndrModes
delete :: ShortHndrModes
cliModes :: [ShortHndrModes]
defaultMode :: ShortHndrModes
helpMode :: ShortHndrModes -> ShortHndrModes
arguments :: Mode ShortHndrModes
replaceArgs :: Mode ShortHndrModes
setInplace :: Bool -> ShortHndrModes -> ShortHndrModes
updateMode :: String -> String -> ShortHndrModes -> Either String ShortHndrModes
instance GHC.Show.Show LibCli.Spec.Replace
instance Data.Data.Data LibCli.Spec.Replace
instance GHC.Show.Show LibCli.Spec.Expand
instance Data.Data.Data LibCli.Spec.Expand
instance GHC.Show.Show LibCli.Spec.Expansion
instance Data.Data.Data LibCli.Spec.Expansion
instance GHC.Show.Show LibCli.Spec.List
instance Data.Data.Data LibCli.Spec.List
instance GHC.Show.Show LibCli.Spec.Add
instance Data.Data.Data LibCli.Spec.Add
instance GHC.Show.Show LibCli.Spec.Update
instance Data.Data.Data LibCli.Spec.Update
instance GHC.Show.Show LibCli.Spec.Delete
instance Data.Data.Data LibCli.Spec.Delete
instance GHC.Show.Show LibCli.Spec.KnowledgeBaseTypes
instance Data.Data.Data LibCli.Spec.KnowledgeBaseTypes
instance GHC.Show.Show LibCli.Spec.ShortHndrModes
instance Data.Data.Data LibCli.Spec.ShortHndrModes


module LibCore.InputInterface
getInput :: String


module LibCore.Models

-- | We parse a string into a NoToken if it does not match the syntax for |
--   parsing. The DoMap is a string that has to be mapped. In our
--   proposals, | the DoMap strings start with @@
data Token
NoToken :: String -> Token
DoMap :: Keyword -> Token
data Keyword
Keyword :: String -> Bool -> Keyword
[keyword] :: Keyword -> String
[plural] :: Keyword -> Bool
instance GHC.Show.Show LibCore.Models.Keyword
instance GHC.Classes.Ord LibCore.Models.Keyword
instance GHC.Classes.Eq LibCore.Models.Keyword
instance GHC.Show.Show LibCore.Models.Token
instance GHC.Classes.Ord LibCore.Models.Token
instance GHC.Classes.Eq LibCore.Models.Token


module LibCore.KnowledgeBase
type KnowledgeBaseStructure = Map Keyword Keyword
getKnowledgeBase :: KnowledgeBaseStructure


module LibCore.OutputInterface
returnOutput :: Maybe FilePath -> String -> IO ()


module LibCore.Parser
type ParseStructure = [Token]

-- | The abbreviation symbol. Can later be made configurable
abbSymbol :: String

-- | The plural symbol. String between the abbSymbol and the pluralSymbol
--   are interpreted as plurals
pluralSymbol :: String

-- | Consume whitespace characters
whitespace :: Parser ()

-- | Lexeme parsers consume the whitespace after them
lexeme :: Parser a -> Parser a

-- | Given a string, parse it. This function can throw an error if parsing
--   fails
doParse :: String -> ParseStructure

-- | Map a string to a list of Tokens. For example: &gt;&gt;&gt; parseInput
--   "@<tt>bob" Right [DoMap (Keyword {keyword = "bob", plural = False})]
--   &gt;&gt;&gt; parseInput "</tt>@fw's" Right [DoMap (Keyword {keyword =
--   "fw", plural = True})] &gt;&gt;&gt; parseInput "hello!" Right [NoToken
--   "hello!"]
parseInput :: String -> Either ParseError ParseStructure

-- | The main parser tries to consume all input into a ParseStructure,
--   given an | abbreviation symbol and a plural symbol
mainParser :: String -> String -> Parser ParseStructure

-- | Inverse of the <a>isSpace</a> function from Data.Char
notSpace :: Char -> Bool

-- | Given an abbreviation string s and a plural end string p, parse the
--   string between it
pluralAbbrParser :: String -> String -> Parser Token

-- | Given an abbreviation string s, parse the string after it
abbrParser :: String -> Parser Token

-- | Parse any string into a token
noAbbrParser :: Parser Token


module LibCore.Mapper

-- | Map a ParseStructure using a KnowledgeBaseStructure to another
--   ParseStructure. | The structure of this function makes it possible to
--   apply multiple | KnowledgeBases to one ParseStructure
mapParseStructure :: KnowledgeBaseStructure -> ParseStructure -> ParseStructure

-- | Lookup a token in the KnowledgeBaseStructure. If it is not found,
--   return | the lookup token. Otherwise, it returns the result of the
--   lookup, which | is also a token
doLookup :: KnowledgeBaseStructure -> Token -> Token


module LibCore.Decoder
decode :: ParseStructure -> String
tokenToString :: Token -> String


module LibCli.Main
mockCliHandler :: ShortHndrModes -> IO ()
handleExpMode :: Expansion -> IO ()
handleKbtMode :: KnowledgeBaseTypes -> IO ()
replaceMode :: Replace -> IO ()

-- | Main entrypoint of the CLI application.
--   
--   <i>CLI endpoints:</i>
--   
--   <ul>
--   <li>replace - expand all the abbreviation in the full text file</li>
--   <li>expand - find an expansion for a single abbreviation input</li>
--   <li>list - list all the known expansion records</li>
--   <li>add - add a new record to the knowledge base</li>
--   <li>update - modify an existing record in the knowledge base</li>
--   <li>delete - delete an existing record from the knowledge base</li>
--   </ul>
--   
--   <i>Usage:</i>
--   
--   <ul>
--   <li>--help - prints the full CLI tool support</li>
--   <li>&lt;command&gt; [args*] [options*] - invokes the command</li>
--   </ul>
--   
--   <i>See more:</i>
--   
--   <ul>
--   <li>See <a>Spec</a> for more information about the CLI endpoints.</li>
--   </ul>
cliMain :: IO ()
