-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/cad0p/uu-afp-2021-team-proj-abbr#readme</a>
@package team-proj-abbr
@version 0.1.0.0

module LibCore.InputInterface
getInput :: String

module LibCore.Models

-- | We parse a string into a NoToken if it does not match the syntax for |
--   parsing. The DoMap is a string that has to be mapped. In our
--   proposals, | the DoMap strings start with @@
data Token
NoToken :: String -> Token
DoMap :: Keyword -> Token
newtype Keyword
Keyword :: String -> Keyword
instance GHC.Show.Show LibCore.Models.Keyword
instance GHC.Classes.Ord LibCore.Models.Keyword
instance GHC.Classes.Eq LibCore.Models.Keyword
instance GHC.Show.Show LibCore.Models.Token
instance GHC.Classes.Ord LibCore.Models.Token
instance GHC.Classes.Eq LibCore.Models.Token

module LibCore.KnowledgeBase
type KnowledgeBaseStructure = Map Keyword Keyword
getKnowledgeBase :: KnowledgeBaseStructure

module LibCore.OutputInterface
returnOutput :: String -> IO ()

module LibCore.Parser
type ParseStructure = [Token]

-- | The abbreviation symbol. Can later be made configurable
abbSymbol :: String

-- | Given a string, parse it. This function can throw an error if parsing
--   fails
doParse :: String -> ParseStructure

-- | Map a string to a list of Tokens
parseInput :: String -> Either ParseError ParseStructure

-- | The main parser tries to consume all input into a ParseStructure,
--   given an abbreviation symbol
mainParser :: String -> Parser ParseStructure

-- | Given an abbreviation string s, parse the string after it
abbrParser :: String -> Parser Token

-- | Parse any string into a token
noAbbrParser :: Parser Token

-- | Consume whitespace characters
whitespace :: Parser ()

-- | Lexeme parsers consume the whitespace after them
lexeme :: Parser a -> Parser a

module LibCore.Mapper

-- | Map a ParseStructure using a KnowledgeBaseStructure to another
--   ParseStructure. | The structure of this function makes it possible to
--   apply multiple | KnowledgeBases to one ParseStructure
mapParseStructure :: KnowledgeBaseStructure -> ParseStructure -> ParseStructure

-- | Lookup a token in the KnowledgeBaseStructure. If it is not found,
--   return | the lookup token. Otherwise, it returns the result of the
--   lookup, which | is also a token
doLookup :: KnowledgeBaseStructure -> Token -> Token

module LibCore.Decoder
decode :: ParseStructure -> String
